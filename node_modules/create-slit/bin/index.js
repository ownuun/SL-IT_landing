#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// 프로젝트 이름 가져오기
const projectName = process.argv[2];

if (!projectName) {
  console.error('❌ 프로젝트 이름을 입력해주세요.');
  console.log('\n사용법: npm create slit <project-name>');
  console.log('예시: npm create slit my-team-page\n');
  process.exit(1);
}

const targetDir = path.join(process.cwd(), projectName);

// 이미 폴더가 있는지 확인
if (fs.existsSync(targetDir)) {
  console.error(`❌ "${projectName}" 폴더가 이미 존재합니다.`);
  process.exit(1);
}

console.log(`\n🚀 Slit 프로젝트를 생성하는 중: ${projectName}\n`);

// 템플릿 폴더 경로
const templateDir = path.join(__dirname, '..', 'template');

// 폴더 복사 함수
function copyDirectory(src, dest) {
  // 대상 폴더 생성
  fs.mkdirSync(dest, { recursive: true });

  // 폴더 내용 읽기
  const entries = fs.readdirSync(src, { withFileTypes: true });

  for (const entry of entries) {
    const srcPath = path.join(src, entry.name);
    const destPath = path.join(dest, entry.name);

    if (entry.isDirectory()) {
      // 폴더면 재귀적으로 복사
      copyDirectory(srcPath, destPath);
    } else {
      // 파일이면 복사
      fs.copyFileSync(srcPath, destPath);
    }
  }
}

try {
  // 템플릿 복사
  copyDirectory(templateDir, targetDir);

  console.log('✅ 프로젝트가 성공적으로 생성되었습니다!\n');
  console.log('다음 단계:');
  console.log(`  cd ${projectName}`);
  console.log('  # 프로젝트 작업을 시작하세요!\n');
  console.log('📁 생성된 구조:');
  console.log(`  ${projectName}/`);
  console.log('    ├── docs/           # 문서 및 프롬프트');
  console.log('    ├── .claude/        # Claude 설정');
  console.log('    └── README.md       # 프로젝트 설명\n');

} catch (error) {
  console.error('❌ 프로젝트 생성 중 오류가 발생했습니다:', error.message);
  process.exit(1);
}
